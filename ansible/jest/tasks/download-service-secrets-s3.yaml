- name: check service-secrets directory is already present
  ansible.builtin.stat:
    path: "{{ storage.jest.path }}/{{ services.secret.directory }}"
  register: service_secret_dir

- name: fail if service-secret directory already exists
  ansible.builtin.fail:
    msg: "The service-secret directory already exists - please remove directory or set services.secret.check_directory_exists to false"
  when:
  - services.secret.check_directory_exists
  - service_secret_dir.stat.exists

- name: create service-secret directory
  become: yes
  ansible.builtin.file:
    state: directory
    owner: root
    group: root
    mode: "0600"
    path: "{{ storage.jest.path }}/{{ services.secret.directory }}"

- name: get list of all objects for service-secret from S3
  amazon.aws.s3_object_info:
    access_key: "{{ aws.access_key_id }}"
    secret_key: "{{ aws.secret_access_key }}"
    region: "{{ aws.region }}"
    bucket_name: "{{ services.secret.aws_bucket }}"
  register: s3_object_items

- name: get list of all files ignoring directories for service-secrets from S3
  ansible.builtin.set_fact:
    s3_file_items: "{{ s3_object_items.s3_keys | map('regex_search', '^.+[^\/]$') | reject('==', None) | list }}"

- name: download archived files for service-secrets from S3
  become: yes
  amazon.aws.s3_object:
    access_key: "{{ aws.access_key_id }}"
    secret_key: "{{ aws.secret_access_key }}"
    region: "{{ aws.region }}"
    mode: get
    bucket: "{{ services.secret.aws_bucket }}"
    object: "{{ item }}"
    dest: "{{ storage.jest.path }}/{{ services.secret.directory }}/{{ item | basename }}"
    overwrite: "{{ 'always' if services.secret.force_download else 'latest' }}"
  loop: "{{ s3_file_items }}"

- name: extract service-secret archives
  become: yes
  ansible.builtin.unarchive:
    src: "{{ storage.jest.path }}/{{ services.secret.directory }}/{{ item | basename }}"
    dest: "{{ storage.jest.path }}/{{ services.secret.directory }}"
  loop: "{{ s3_file_items }}"

- name: delete service-secret archives after extraction
  become: yes
  ansible.builtin.file:
    path: "{{ storage.jest.path }}/{{ services.secret.directory }}/{{ item | basename }}"
    state: absent
  loop: "{{ s3_file_items }}"
  when: services.secret.delete_archives
